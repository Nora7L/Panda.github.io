<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ES6--可爱的新特性]]></title>
    <url>%2F2018%2F06%2F11%2FES6-%E5%8F%AF%E7%88%B1%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[涉及到的知识点 变量声明 模板字符串 函数 拓展的对象功能 更方便的数据访问–解构 Spread Operator 展开运算符 import 和 export Promise Generators 变量声明let基本用法 声明变量，只在let命令所在的代码块内有效 不存在变量提升 暂时性死区 不允许重复声明 #count模板字符串函数拓展的对象功能解构赋值Spread Operatorimport 和 exportPromiseGenerators]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-音乐播放,支持https及多平台]]></title>
    <url>%2F2018%2F06%2F08%2Fhexo-%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%2C%E6%94%AF%E6%8C%81https%E5%8F%8A%E5%A4%9A%E5%B9%B3%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[前言铛铛~今天要介绍的神器就是它 -→ aplayer中文文档在这里 使用方法引用 APlayer.min.js将下面的代码放在主题文件header最上面，举个栗子，我的主题是next，那么路径就是： hexo\themes\next\layout\ _partials\header.swig &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css&quot;&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js&quot;&gt;&lt;/script&gt; 引用 Meting.min.js将下面的代码放在主题文件footer最上面，举个栗子，我的主题是next，那么路径就是： hexo\themes\next\layout\ _partials\footer.swig &lt;script src=&quot;https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js&quot;&gt;&lt;/script&gt; 添加音乐做好上面两步，接下来就可以添加音乐了，可以在任意我们想要放音乐的地方引入，这个是我的歌单，可以通过修改id等参数来自定义。 123456&lt;div class="aplayer" data-id="863943011" data-server="netease" data-type="playlist" data-mode="random" data-autoplay="false"&gt;&lt;/div&gt; 参数详解下面来介绍几个常用的参数，更多的参数可以在官方文档里查看。 data-id： 歌曲/专辑/歌单 ID data-server：音乐平台，支持多平台 netease：网易云音乐 tencent：QQ音乐 xiami：虾米音乐 kugou：酷狗音乐 baidu：百度音乐 data-type: 请求类型，支持如下参数 song （单曲） album （专辑） playlist （歌单） search （搜索） data-mode: 播放模式 random （随机） single （单曲） circulation （列表循环） order （列表） data-autoplay: 自动播放 false true 我的音乐 先来欣赏一段音乐吧，我们边听边聊~ 参考文献 https://www.tiexo.cn/aplayer/]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack--图片打包]]></title>
    <url>%2F2018%2F06%2F06%2Fwebpack-%E5%9B%BE%E7%89%87%E6%89%93%E5%8C%85%2F</url>
    <content type="text"><![CDATA[前言webpack–图片打包刚开始学习webpack时，踩了很多的坑，会遇到打包出来的图片地址不对或者有的图片并不能打包进我们的目标文件夹里，无法加载多个图像等各种各样的问题。 Loaderwebpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如 CoffeeScript、 JSX、 LESS 或图片。loader机制的存在让webpack拥有了无限的可能性，让webpack几乎可以容纳一切前端需要的资源。同时合理得利用loader也有助于我们在架构项目的时候省去很多重复工作。更多内容请点击参考文献。 生产中的几种引用方式HTML文件中img标签的src属性引用或者内嵌样式引用&lt;img src=&quot;photo.jpg&quot; /&gt; &lt;div style=&quot;background:url(photo.jpg)&quot;&gt;&lt;/div&gt; CSS文件中的背景图等.photo { background: url(photo.jpg); } JavaScript文件中动态添加或者改变的图片引用var imgTemplate = &apos;&lt;img src=&quot;photo.jpg&quot; /&gt;&apos;; document.body.innerHTML = imgTemplate; ReactJS中图片的引用import React from &apos;react&apos;; import ReactDOM from &apos;react-dom&apos;; class App extends React.Component { render() { return (&lt;img src=&apos;photo.jpg&apos; /&gt;); } } ReactDom.render(&lt;App /&gt;, document.querySelector(&apos;#container&apos;)); 在webpack中引入图片安装url-loader npm install url-loader –save-dev 配置webpack.config.js在 webpack.config.js 文件中配置如下： module: { loaders: [ { test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&amp;name=images/[hash:8].[name].[ext]&apos; } ] } test：代表可以匹配的图片类型，除了 png、jpg 和 gif 等，以竖线隔开。 loaders&gt;limit： 字段代表图片打包限制，不是说超过了限制就不能打包，是指当图片大小小于限制时会自动转成 base64 码引用。上例中，大于8192字节的图片正常打包，小于8192字节的图片以 base64 方式引用。 loaders&gt;name：指定图片打包的目录与文件名，上例中的 name 字段指定了在打包根目录（output.path）下生成名为 images 的文件夹，并在原图片名前加上8位 hash 值。 单独打包css打包图片（一）webpack 把所有的资源都当成了一个模块, CSS,Image, JS 字体文件 都是资源, 都可以打包到一个 bundle.js 文件中。我们单独处理css，可以用 extract-text-webpack-plugin 把 CSS 分离成文件 $ npm install –save-dev extract-text-webpack-plugin 如果是webpack4,加上下面的就不会报错了 npm install extract-text-webpack-plugin@next –save-dev webpack.config.js const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;); module.exports = { entry: &apos;./src/app.js&apos;, output: { path: __dirname + &apos;/dist&apos;, filename: &apos;app.bundle.js&apos; }, plugins: [new ExtractTextPlugin( filename: &apos;./[path]/[name].css&apos; //路径以及命名 )], module: { rules: [ { test: /\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/, loader: &apos;url-loader?name=[path]/[name].[hash].[ext]&apos; }, { test: /\.css$/, use: ExtractTextPlugin.extract({ fallback: &apos;style-loader&apos;, use: [&apos;css-loader&apos;] }), exclude: /node_modules/ } ] } }; 使用url-loader或者file-loader都可以，具体的看自己的需求了 参考文献 https://www.cnblogs.com/ghost-xyx/p/5812902.html https://stackoverflow.com/questions/37313954/how-to-url-loader-multiple-images-in-webpack https://github.com/lengziyu/learn-webpack/issues/2 https://www.cnblogs.com/zhongxia/p/5834089.html]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+next 设置首页不显示某些文章]]></title>
    <url>%2F2018%2F06%2F04%2Fhexo-next-%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%9F%90%E4%BA%9B%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[设置一个参数在这里我设置的参数是notshow，默认为true，我直接把他写入/scaffolds/post.md模板中了，这样会比较方便。利用命令行创建新文章： hexo new &quot;hexo+next设置首页不显示某些文章&quot; 生成的文章内容如下： 修改主题模板修改当前主题下的layout/_macro/post.swig文件，在内容外加入下面的代码 {% if post.notshow and is_home() %} #原来中间的代码 {% endif %} 效果如图： 如果报错可以去掉is_home()。 注意这里虽然因为设置了，没有在首页显示某些文章，但是实际上该文章还是会计入per_page中。目前还没有什么更好的方法解决这个问题，如果大神们有更好的解决方法，请联系我~！]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【独自走在减脂的路上】减脂餐记录]]></title>
    <url>%2F2018%2F06%2F04%2Fhiit%2F</url>
    <content type="text"><![CDATA[Z2 - 2018.09.01 早：无 午：意大利面 回锅肉 木耳炒肉 晚：黄瓜 豆皮 喝水：1000ml 体重：186.8 感想：昨天晚上放肆的吃了好多东西 牛奶 水 酸奶 红柚，再加上晚上还吃了凉拌菜，反弹很正常，又放肆了一次，可怕。对了，还加了120g的巧克力棒今天，在晚上吃的 Z2 - 2018.08.31 早：红柚 200ml纯牛奶 意大利面 回锅肉 木耳炒肉 午：意大利面 回锅肉 木耳炒肉 晚：凉拌菜 喝水：1500ml 体重：184.7 感想：这个月最后一天反弹了0.9，总共减重8.5斤。总结一个月的曲线变化，大概有十几天的时间一直在反反复复，最速效的时期就是快到月底这几天了，因为前面破过一次高糖，所以后面浪费了不少的时间。九月，目标170！ Z2 - 2018.08.30 早：红柚 200ml纯牛奶 肉沫酸豆角 糙米 豆皮 午：肉末酸豆角 蚂蚁上树 糙米 晚：黄瓜 喝水：2000ml 体重：183.8 感想：就剩明天一天啦 十斤差一点 Z2 - 2018.08.28 早：苹果 200ml纯牛奶 豆皮 肉饼 午：馅饼 豆豉豆皮 晚：西红柿两个 喝水：2000ml 体重：185.1 感想：最低可以到4啦 这个月有机会可以到达十斤了完美 Z2 - 2018.08.27 早：四瓣苹果 200ml纯牛奶 肉沫豆角 肉饼 午：馅饼 豆豉豆皮 晚：西红柿两个 喝水：2000ml 体重：185.7 感想：周末去吃了日料和烤肉，学会了有控制的点餐，点的刚刚好，不会浪费也不会吃不完，果然就掉秤了，还有四天到月底，再减2斤多，凑个整哈哈 Z2 - 2018.08.23 早：红柚 200ml纯牛奶 肉沫豆角 糙米 豆豉豆皮 午：糙米 豆豉豆皮 孜然肥牛 晚：黄瓜 西红柿 喝水：2000ml 体重：188.5 感想：大姨妈终于完了 不知道是不是称坏了 称出来两个数字 188.5 187.5 最近真的水肿了 手腕的肿了一圈 蓝瘦 Z2 - 2018.08.22 早：红柚 200ml纯牛奶 蔬菜饼 龙利鱼 午：蔬菜饼 糙米 龙利鱼 晚：黄瓜 鱼 喝水：2000ml 体重：188.1 感想：反弹了0.8 不知道是不是因为茄子的原因 Z2 - 2018.08.22 早：红柚 200ml纯牛奶 豆豉茄子 蔬菜饼 龙利鱼 午：蔬菜饼 豆豉茄子 龙利鱼 晚：黄瓜 龙利鱼 喝水：2000ml 体重：187.3 感想：每天的喝水大概都保持在四杯左右 最近掉得比较少 到今天 这个月是六斤 Z2 - 2018.08.21 早：红柚 200ml纯牛奶 牛肉馅饼 午：杂蔬 牛肉馅饼 晚：黄瓜 鱼 喝水：2000ml 体重：187.7 感想：hh 今天才是还有十天到月底 这个月的目标是达到十斤 Z2 - 2018.08.20 早：红柚 400ml纯牛奶 牛肉馅饼 午：杂蔬 牛肉馅饼 晚：黄瓜 鱼 喝水：2000ml 体重：187.9 感想：终于掉秤了 还有十天 Z2 - 2018.08.17 早：猕猴桃两个 200ml纯牛奶 鸡胸肉一片 冬瓜少许 糙米80g 午：鸡胸肉一片 芹菜炒肉（豆豉） 糙米80g 晚：鸡胸肉一片 黄瓜 喝水：2000ml 体重：189.0（比破戒之前重了0.5 可怕kepa！） 感想：今天晚上说啥都要回归最低体重了 不能再这样的了！！ Z2 - 2018.08.16 早：猕猴桃两个 200ml纯牛奶 鸡胸肉一片 冬瓜少许 糙米80g 午：鸡胸肉一片 芹菜炒肉（豆豉） 糙米80g 晚：鸡胸肉一片 黄瓜 喝水：2000ml 体重：190.8（比破戒之前重了2.3 可怕kepa！） 感想：今天晚上说啥都要下190了 不能再这样的了！！ Z2 - 2018.08.9 早：西红柿油麦菜厚蛋烧 糙米 猕猴桃 牛奶 午：西红柿油麦菜厚蛋烧 糙米 鸡胸肉 晚：鸡胸肉 茭白炒蛋 卤菜 喝水：2000ml 便秘：没有 睡眠：晚睡 感想：晚上瞎吃加晚睡，成功的反弹了 Z2 - 2018.08.8 Z2代表的意思是这是我减脂的第二个阶段了 前段时间比较忙，也没有记录饮食，只记录了体重 破戒情况也是有的，但总体说效果还是不错的 到今天刚好32斤，换成等量的肉，有点不敢想象啊 称重：190.5 称重：如果可以的话，我会尽力保持每天都记录的^_^ Z2 - 2018.07.26 目标95 到今天98.1 你可以的！ 还有不到一周时间~ Z2 - 2018.07.01 到今天刚好减去20斤整 新的一个月，目标是95 你可以的！ D5 - 2018.06.05 早：黄金鲽鱼、全蛋 午：孜然羊肉、茭白鸡蛋、香芹炒肉 晚：煎梅花肉、香芹炒肉、龙利鱼 喝水：2000ml上 感受：姨妈期掉秤变慢了，不过也没有办法，坚持啊✊，这几天北京热的不行不行的[摊手]要崩#减脂# D4 - 2018.06.04 早：西葫芦、孜然羊肉、龙利鱼、全蛋一个 午：孜然羊肉、小白菜炒肉、西葫芦 晚：西葫芦、龙利鱼 喝水：2000ml左右 感受：中午没有午休，大脑感觉那个累，下午敲代码都感觉麻，身体上没有不舒服，这几天依旧掉秤，掉体脂率，很开心，做饭比较麻烦，一弄要一个多小时快两个小时了，很浪费时间哎。我的漫威到啦，喝水更有动力哈哈哈！ D3 - 2018.06.03 早：水煮蛋、孜然羊肉、煎龙利鱼、清炒西葫芦 午：孜然羊肉、煎龙利鱼、清炒西葫芦 晚：炖猪蹄、清炒西葫芦 喝水：2000ml 感受：这几天每天都吃的很舒服，身体还没有什么不适的，就是会觉得想吃糖，不过忍住就好了，实在想吃可以喝一点零度可乐。 体重：-8.9j​​​​​​ D2 - 2018.06.02 早：椒盐鸡丝、一个蛋白 中：椒盐鸡丝、烤龙利鱼、培根黄瓜、虾仁炒蛋 晚：清炒娃娃菜、猪蹄海带 喝水：2200ml以上 称重：体脂率-1.4%、肌肉率+0.9% 感受：昨天晚上有点失眠了，睡的比较晚，大概12点了才睡着，但是晚上的睡眠质量很好，早上七点半自然醒，今天身体上依旧没有任何不适，很精神，下午时间比较充足加了一点运动，因为天气比较热，所以喝的水也很多，有点超了。 D1 - 2018.06.01 早：椒盐鸡丝、一个全蛋 午：培根黄瓜、椒盐鸡丝、烤龙利鱼、虾仁炒蛋 晚：培根黄瓜、虾仁炒蛋、椒盐鸡丝 喝水：2000ml以上 感受：一天来没有感觉到身体有不适，工作效率很高，吃饭的时候刻意放慢了速度，这样会慢慢感觉到饱，这时就可以停止进食了，下午的时候会感觉到饿，一直在喝水，到了五点多就没有感觉很饿，晚饭吃的比较晚，到家大概七点了，八点之后尽量不要吃东西也不要喝水。 心理年龄91[摊手]]]></content>
      <categories>
        <category>hiit</category>
      </categories>
      <tags>
        <tag>hiit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GIT命令--初级使用]]></title>
    <url>%2F2018%2F05%2F31%2FGIT%E5%91%BD%E4%BB%A4-%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Git的使用找到一个本地磁盘来创建git的.git文件cd --- 跳转路径 pwd --- 查看路径 在该路径下面创建一个版本库，也就是仓库repositorygit init --- 初始化，创建版本库 这时候你就可以在/e/git下看到一个名为.git的文件夹了，如果没有看到也没关系，因为它是隐藏的！注意：千万不要随意修改这里面的文件！ 我们在文件夹内创建一个记事本文件read.txtmkdir --- window创建文件夹 type nul &gt; read.txt --- window创建文件 touch --- linux创建文件 回到命令行，输入以下，如图就说明我们添加成功了git add --- 添加文件到暂存区 接着来将read.txt文件提交到仓库git commit -m &quot;提交的描述信息&quot; 如果我们想要查看有没有提交成功，可以使用命令git status来查看git status --- 显示工作目录和暂存区的状态 现在我在read.txt里添加一行内容：123123，我们使用git status来查看下 上面告诉我们 read.txt 已经被修改了，但是没有被提交 查看一下read.txt里面被修改了一些什么东西git diff read.txt --- 差异对比 我们可以看到在第一行添加了内容“123123”，接下来我们可以把修改过的文件提交到仓库里了，这一步和之前的提交是一样的 Git的更多使用接下来，我在read.txt里添加了第二行内容 233333. 我们先提交一下 这时候是不是已经对这两个提交命令很熟悉了呢！ 接下来，我们想要查看下之前添加修改的历史记录git log --- 查看提交历史 或者 git log --pretty=oneline --- 中间是两个“-” 这样查看是不是更加清晰简洁呢 如果你想要之前的版本了，我们就可以退回去！有2个方法可以使我们退回之前的版本 git reset --hard HEAD^ 一个^代表退回一个版本 如果需要退回到上上个版本的话 就使用2个^就好了，但是如果你想退回第一百个版本的话就要使用我们的第二个方法了 git reset --hard HEAD~100 是不是更加方便呢！ 然后我们来cat一下 退回了！我们再来看一下log 已经没有之前添加的“233333”了 现在我们想要恢复回来之前退回的内容了，可以使用版本号来恢复git reflog --- 查看版本号 git reset --hard --- 版本号** 恢复 就到这里了，上面就是我在项目中遇到的几个git命令，在这方面我还是一个小白，后面会深入学习的~~]]></content>
      <categories>
        <category>GIT</category>
      </categories>
      <tags>
        <tag>GIT</tag>
      </tags>
  </entry>
</search>
